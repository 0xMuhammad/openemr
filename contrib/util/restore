#!/bin/bash

# Copyright (C) 2008 Rod Roark <rod@sunsetsystems.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This is for restoring a backup created by the "Backup" option
# in OpenEMR's administration menu, which invokes
# interface/main/backup.php.

echo "OpenEMR Restore from Backup"
echo " "
echo "WARNING: This script is experimental.  It may have serious bugs"
echo "or omissions.  Use it at your own risk!"
echo " "

BAKDIR=/tmp/emr_backup

if [ $UID -ne 0 ]; then
  echo "Error: This script must be executed with root privileges."
  exit 1
fi

# Do some argument checking.
if [ $# -ne 1 ]; then
  echo "This command requires one argument: the full path to the backup file."
  exit 1
fi
TARFILE=$1
if [ ! -f $TARFILE ]; then
  echo "Error: '$TARFILE' is not found or is not a file."
  exit 1
fi

# Create and change to a clean scratch directory.
rm -rf $BAKDIR
mkdir  $BAKDIR
if [ $? -ne 0 ]; then
  echo "Error: Cannot create directory '$BAKDIR'."
  exit 1
fi
cd $BAKDIR

# Extract the backup tarball into the scratch directory.
echo "Extracting $TARFILE ..."
tar -xf $TARFILE
if [ $? -ne 0 ]; then
  echo "Error: tar could not extract '$TARFILE'."
  exit 1
fi

# Extract the OpenEMR web directory tree.
echo "Extracting $BAKDIR/openemr.tar.gz ..."
mkdir openemr
cd openemr
tar zxf ../openemr.tar.gz
if [ $? -ne 0 ]; then
  echo "Error: tar could not extract '$BAKDIR/openemr.tar.gz'."
  exit 1
fi

# Get various parameters from the extracted files.
OEDIR=`grep '^\$webserver_root' interface/globals.php | cut -d \" -f 2`
OEDBNAME=`grep '^\$dbase' library/sqlconf.php | cut -d \' -f 2`
OEDBUSER=`grep '^\$login' library/sqlconf.php | cut -d \' -f 2`
OEDBPASS=`grep '^\$pass'  library/sqlconf.php | cut -d \' -f 2`
SLDBNAME=''
if [ -f ../sql-ledger.sql ]; then
  SLDBNAME=`grep '^\$sl_dbname' interface/globals.php | cut -d \' -f 2`
  SLDBUSER=`grep '^\$sl_dbuser' interface/globals.php | cut -d \' -f 2`
  SLDBPASS=`grep '^\$sl_dbpass' interface/globals.php | cut -d \' -f 2`
fi
GADIR=''
GADBNAME=''
if [ -f ../phpgacl.tar.gz ]; then
  GADIR=`grep '^\s*\$phpgacl_location' library/acl.inc | cut -d \" -f 2`
  mkdir ../phpgacl
  cd    ../phpgacl
  echo "Extracting $BAKDIR/phpgacl.tar.gz ..."
  tar zxf ../phpgacl.tar.gz
  if [ $? -ne 0 ]; then
    echo "Error: tar could not extract '$BAKDIR/phpgacl.tar.gz'."
    exit 1
  fi
  if [ -f ../phpgacl.sql.gz ]; then
    GADBNAME=`grep '^\s*var \$_db_name'     gacl.class.php | cut -d \' -f 2`
    GADBUSER=`grep '^\s*var \$_db_user'     gacl.class.php | cut -d \' -f 2`
    GADBPASS=`grep '^\s*var \$_db_password' gacl.class.php | cut -d \' -f 2`
  fi
fi
SLDIR=''
if [ -f ../sql-ledger.tar.gz ]; then
  SLDIR=`dirname $OEDIR`/sql-ledger
fi

echo " "
read -e -p 'Do you want to specify new locations and database names for the restore? [N/y] ' CHANGES
echo " "
CHANGES=`expr "$CHANGES" : "[yY]"`
if [ $CHANGES -gt 0 ]; then
  echo "Current values are shown in [brackets]. Just hit Enter to leave them as-is."
  echo " "
  OLDOEDBNAME="$OEDBNAME"
  read -e -p "OpenEMR database name [$OEDBNAME]? " Q
  if [ ! -z "$Q" ]; then OEDBNAME="$Q"; fi
  OLDOEDBUSER="$OEDBUSER"
  read -e -p "OpenEMR database user [$OEDBUSER]? " Q
  if [ ! -z "$Q" ]; then OEDBUSER="$Q"; fi
  OLDOEDBPASS="$OEDBPASS"
  read -e -p "OpenEMR database password [$OEDBPASS]? " Q
  if [ ! -z "$Q" ]; then OEDBPASS="$Q"; fi
  if [ ! -z "$GADBNAME" ]; then
    OLDGADBNAME="$GADBNAME"
    read -e -p "phpGACL database name [$GADBNAME]? " Q
    if [ ! -z "$Q" ]; then GADBNAME="$Q"; fi
    OLDGADBUSER="$GADBUSER"
    read -e -p "phpGACL database user [$GADBUSER]? " Q
    if [ ! -z "$Q" ]; then GADBUSER="$Q"; fi
    OLDGADBPASS="$GADBPASS"
    read -e -p "phpGACL database password [$GADBPASS]? " Q
    if [ ! -z "$Q" ]; then GADBPASS="$Q"; fi
  fi
  if [ ! -z "$SLDBNAME" ]; then
    OLDSLDBNAME="$SLDBNAME"
    read -e -p "SQL-Ledger database name [$SLDBNAME]? " Q
    if [ ! -z "$Q" ]; then SLDBNAME="$Q"; fi
    OLDSLDBUSER="$SLDBUSER"
    read -e -p "SQL-Ledger database user [$SLDBUSER]? " Q
    if [ ! -z "$Q" ]; then SLDBUSER="$Q"; fi
    OLDSLDBPASS="$SLDBPASS"
    read -e -p "SQL-Ledger database password [$SLDBPASS]? " Q
    if [ ! -z "$Q" ]; then SLDBPASS="$Q"; fi
  fi
  OLDOEDIR="$OEDIR"
  read -e -p "OpenEMR web directory [$OEDIR]? " Q
  if [ ! -z "$Q" ]; then OEDIR="$Q"; fi
  if [ ! -z "$GADIR" ]; then
    OLDGADIR="$GADIR"
    read -e -p "phpGACL web directory [$GADIR]? " Q
    if [ ! -z "$Q" ]; then GADIR="$Q"; fi
  fi
  if [ ! -z "$SLDIR" ]; then
    OLDSLDIR="$SLDIR"
    read -e -p "SQL-Ledger web directory [$SLDIR]? " Q
    if [ ! -z "$Q" ]; then SLDIR="$Q"; fi
  fi
fi

echo " "

# If phpgacl has its own database, make sure the database user is not the
# same as for openemr.  This is to prevent screwups caused by persistent
# database connections in PHP.
if [ ! -z "$GADBNAME" ]; then
  if [ "$GADBUSER" = "$SLDBUSER" ]; then
    echo "Error: OpenEMR and phpGACL have separate databases but the same user name."
    echo "They must be different user names."
    exit 1
  fi
fi

# The following sanity checks are an attempt to avoid disastrous results
# from mistakes in entry of directory path names.

TRASH=`expr "$OEDIR" : "[/]"`
if [ $TRASH -ne 1 ]; then
  echo "Error: The OpenEMR directory path '$OEDIR' does not start with '/'."
  exit 1
fi
if [ -e "$OEDIR" -a ! -e "$OEDIR/interface/globals.php" ]; then
  echo "Error: $OEDIR already exists but does not look like an OpenEMR directory."
  echo "If you are really sure you want to replace it, please remove it first."
  exit 1
fi

TRASH=`expr "$GADIR" : "[/]"`
if [ $TRASH -ne 1 ]; then
  echo "Error: The phpGACL directory path '$GADIR' does not start with '/'."
  exit 1
fi
if [ -e "$GADIR" -a ! -e "$GADIR/gacl.class.php" ]; then
  echo "Error: $GADIR already exists but does not look like a phpGACL directory."
  echo "If you are really sure you want to replace it, please remove it first."
  exit 1
fi

TRASH=`expr "$SLDIR" : "[/]"`
if [ $TRASH -ne 1 ]; then
  echo "Error: The SQL-Ledger directory path '$SLDIR' does not start with '/'."
  exit 1
fi
if [ -e "$SLDIR" -a ! -e "$SLDIR/setup.pl" ]; then
  echo "Error: $SLDIR already exists but does not look like a SQL-Ledger directory."
  echo "If you are really sure you want to replace it, please remove it first."
  exit 1
fi

# Ask the user to do final sanity checking.
echo "I will restore the OpenEMR database backup to the MySQL database '$OEDBNAME'."
echo "The OpenEMR database user will be '$OEDBUSER' with password '$OEDBPASS'."
if [ ! -z "$GADBNAME" ]; then
  echo "I will restore the phpGACL database backup to the MySQL database '$GADBNAME'."
  echo "The phpGACL database user will be '$GADBUSER' with password '$GADBPASS'."
fi
if [ ! -z "$SLDBNAME" ]; then
  echo "I will restore the SQL-Ledger database backup to the PostgreSQL database '$SLDBNAME'."
  echo "The SQL-Ledger database user will be '$SLDBUSER' with password '$SLDBPASS'."
fi
echo "I will copy the OpenEMR web directory backup to '$OEDIR'."
if [ ! -z "$GADIR" ]; then
  echo "I will copy the phpGACL web directory backup to '$GADIR'."
fi
if [ ! -z "$SLDIR" ]; then
  echo "I will copy the SQL-Ledger web directory backup to '$SLDIR'."
fi
echo " "
echo "Please check the above very carefully!"
echo "Any existing databases and directories matching these names will be DESTROYED."
read -p "Press Ctrl-C now if you have any doubts!"

echo " "
read -e -p 'Enter the password, if any, for the MySQL root user: ' MYROOTPASS
echo " "

echo "Dropping old OpenEMR database if it exists ..."
mysqladmin --password="$MYROOTPASS" --force drop $OEDBNAME 2> /dev/null

echo "Restoring MySQL database ..."
cd $BAKDIR
gunzip openemr.sql.gz
if [ $? -ne 0 ]; then
  echo "Error: Could not decompress '$BAKDIR/openemr.sql.gz'."
  exit 1
fi
mysqladmin --password="$MYROOTPASS" create $OEDBNAME
if [ $? -ne 0 ]; then
  echo "Error: Could not create MySQL database '$OEDBNAME'."
  exit 1
fi
mysql --password="$MYROOTPASS" --execute "GRANT ALL PRIVILEGES ON $OEDBNAME.* TO '$OEDBUSER'@'localhost' IDENTIFIED BY '$OEDBPASS'" $OEDBNAME
mysql --user=$OEDBUSER --password="$OEDBPASS" $OEDBNAME < openemr.sql
if [ $? -ne 0 ]; then
  echo "Error: Restore to database '$OEDBNAME' failed."
  exit 1
fi

if [ ! -z "$GADBNAME" ]; then
  echo "Dropping old phpGACL database if it exists ..."
  mysqladmin --password="$MYROOTPASS" --force drop $GADBNAME 2> /dev/null
  echo "Restoring phpGACL database ..."
  cd $BAKDIR
  gunzip phpgacl.sql.gz
  if [ $? -ne 0 ]; then
    echo "Error: Could not decompress '$BAKDIR/phpgacl.sql.gz'."
    exit 1
  fi
  mysqladmin --password="$MYROOTPASS" create $GADBNAME
  if [ $? -ne 0 ]; then
    echo "Error: Could not create MySQL database '$GADBNAME'."
    exit 1
  fi
  mysql --password="$MYROOTPASS" --execute "GRANT ALL PRIVILEGES ON $GADBNAME.* TO '$GADBUSER'@'localhost' IDENTIFIED BY '$GADBPASS'" $GADBNAME
  mysql --user=$GADBUSER --password="$GADBPASS" $GADBNAME < phpgacl.sql
  if [ $? -ne 0 ]; then
    echo "Error: Restore to database '$GADBNAME' failed."
    exit 1
  fi
fi

if [ ! -z "$SLDBNAME" ]; then
  unset PGUSER
  unset PGPASSWORD
  echo "Restarting Apache to close persistent database connections ..."
  apache2ctl graceful
  echo "Dropping old SQL-Ledger database if it exists ..."
  sudo -u postgres psql --command "DROP DATABASE \"$SLDBNAME\"" template1 2> /dev/null
  echo "Creating database user and procedural language ..."
  sudo -u postgres psql --command "DROP ROLE \"$SLDBUSER\"" template1 2> /dev/null
  sudo -u postgres psql --command "CREATE ROLE \"$SLDBUSER\" PASSWORD '$SLDBPASS' CREATEDB CREATEROLE INHERIT LOGIN" template1
  sudo -u postgres createlang plpgsql template1 2> /dev/null
  echo "Restoring SQL-Ledger database ..."
  sudo -u postgres psql --command "CREATE DATABASE \"$SLDBNAME\" WITH TEMPLATE template0" template1
  if [ $? -ne 0 ]; then
    echo "Error: Could not create PostgreSQL database '$SLDBNAME'."
    exit 1
  fi
  sudo -u postgres psql --command "ALTER DATABASE \"$SLDBNAME\" OWNER TO \"$SLDBUSER\"" template1
  if [ $? -ne 0 ]; then
    echo "Error: Could not set owner to '$SLDBUSER' for PostgreSQL database '$SLDBNAME'."
    exit 1
  fi
  sudo -u postgres pg_restore --no-owner --dbname=$SLDBNAME sql-ledger.sql
  if [ $? -ne 0 ]; then
    echo "Error: Restore to database '$SLDBNAME' failed."
    exit 1
  fi
  sudo -u postgres psql --command "ANALYZE" $SLDBNAME
fi

echo "Restoring OpenEMR web directory tree ..."
mkdir -p $OEDIR
rm -rf $OEDIR
mv $BAKDIR/openemr $OEDIR
if [ $? -ne 0 ]; then
  echo "Error: Cannot create directory '$OEDIR'."
  exit 1
fi
#
if [ $CHANGES -gt 0 ]; then
  echo "Modifying $OEDIR/interface/globals.php ..."
  # Taking a guess as to the proper value for $web_root.  We could ask
  # the user for it, but I fear that confusion over what it means would
  # lead to more errors than fixes.
  OEFILE=`basename $OEDIR`
  cd $OEDIR/interface
  mv -f globals.php globals.php.old
  sed "s^$OLDOEDIR^$OEDIR^"                globals.php.old | \
  sed "/\\\$web_root *=/ c \$web_root = \"/$OEFILE\";"     | \
  sed "s^sl_dbname *= '.*'^sl_dbname = '$SLDBNAME'^"       | \
  sed "s^sl_dbuser *= '.*'^sl_dbuser = '$SLDBUSER'^"       | \
  sed "s^sl_dbpass *= '.*'^sl_dbpass = '$SLDBPASS'^"         \
  > globals.php
  #
  echo "Modifying $OEDIR/library/sqlconf.php ..."
  cd $OEDIR/library
  mv sqlconf.php sqlconf.php.old
  sed "s^dbase\t= '.*'^dbase\t= '$OEDBNAME'^" sqlconf.php.old | \
  sed "s^login\t= '.*'^login\t= '$OEDBUSER'^"                 | \
  sed "s^pass\t= '.*'^pass\t= '$OEDBPASS'^" > sqlconf.php
fi

if [ ! -z "$GADIR" ]; then
  echo "Restoring phpGACL web directory tree ..."
  mkdir -p $GADIR
  rm -rf $GADIR
  mv $BAKDIR/phpgacl $GADIR
  if [ $? -ne 0 ]; then
    echo "Error: Cannot create directory '$GADIR'."
    exit 1
  fi
  #
  if [ $CHANGES -gt 0 ]; then
    echo "Modifying $OEDIR/library/acl.inc ..."
    cd $OEDIR/library
    mv -f acl.inc acl.inc.old
    sed "s^$OLDGADIR^$GADIR^" acl.inc.old > acl.inc
    #
    echo "Modifying $GADIR/gacl.class.php ..."
    cd $GADIR
    mv -f gacl.class.php gacl.class.php.old
    sed "s^db_name *= *'$OLDGADBNAME'^db_name = '$GADBNAME'^" gacl.class.php.old | \
    sed "s^db_user *= *'$OLDGADBUSER'^db_user = '$GADBUSER'^"                    | \
    sed "s^db_password *= *'$OLDGADBPASS'^db_password = '$GADBPASS'^" > gacl.class.php
    #
    echo "Modifying $GADIR/gacl.ini.php ..."
    cd $GADIR
    mv -f gacl.ini.php gacl.ini.php.old
    sed "s^db_name *= *\"$OLDGADBNAME\"^db_name = \"$GADBNAME\"^" gacl.ini.php.old | \
    sed "s^db_user *= *\"$OLDGADBUSER\"^db_user = \"$GADBUSER\"^"                  | \
    sed "s^db_password *= *\"$OLDGADBPASS\"^db_password = \"$GADBPASS\"^" > gacl.ini.php
  fi
fi

if [ ! -z "$SLDIR" ]; then
  echo "Restoring SQL-Ledger web directory tree ..."
  mkdir -p $SLDIR
  rm -rf $SLDIR
  mkdir $SLDIR
  cd $SLDIR
  if [ $? -ne 0 ]; then
    echo "Error: Creating $SLDIR failed."
    exit 1
  fi
  tar zxf $BAKDIR/sql-ledger.tar.gz
  if [ $? -ne 0 ]; then
    echo "Error: Extracting '$BAKDIR/sql-ledger.tar.gz' failed."
    exit 1
  fi
  #
  if [ $CHANGES -gt 0 ]; then
    # SQL-Ledger stores passwords in an obfuscated form.
    SLDBHASH=`perl -e "print pack u, '$SLDBPASS'"`
    #
    echo "Modifying $SLDIR/ws_server.pl ..."
    cd $SLDIR
    mv -f ws_server.pl ws_server.pl.old
    sed "s^$OLDSLDIR^$SLDIR^" ws_server.pl.old > ws_server.pl
    chmod a+x ws_server.pl
    #
    echo "Modifying $SLDIR/users/admin.conf ..."
    cd $SLDIR/users
    mv -f admin.conf admin.conf.old
    sed "s^dbname => '.*'^dbname => '$SLDBNAME'^" admin.conf.old | \
    sed "s^dbuser => '.*'^dbuser => '$SLDBUSER'^"                | \
    sed "/dbpasswd =>/ c \  dbpasswd => '$SLDBHASH',"            | \
    sed "s^dbname=$OLDSLDBNAME^dbname=$SLDBNAME^" > admin.conf
    #
    echo "Modifying $SLDIR/users/members ..."
    cd $SLDIR/users
    mv -f members members.old
    sed "s^dbname=.*^dbname=$SLDBNAME^g" members.old | \
    sed "s^dbuser=.*^dbuser=$SLDBUSER^g"             | \
    sed "/dbpasswd=/ c dbpasswd=$SLDBHASH" > members
  fi
fi

echo "All done."
echo " "
